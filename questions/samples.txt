# Sample 1 
# def exam_attempt(request, exam_id):
#     exam = get_object_or_404(Exam, id=exam_id)
#     questions = Question.objects.filter(question_exam=exam)

#     if request.method == 'POST':
#         attempt = ExamAttempt(exam=exam)
#         attempt.save()
#         question_ids = set()

#         for question in questions:
#             answer = request.POST.get(f'question_{question.id}')

#             if question.id in question_ids:
#                 messages.error(request, 'Each question should have a unique answer.')
#                 return redirect('exam_attempt', exam_id=exam_id)

#             question_ids.add(question.id)

#             user_answer = UserAnswer(exam_attempt=attempt, question=question, answer=answer)
#             user_answer.save()

#         attempt.calculate_score()
#         messages.success(request, 'Exam submitted successfully.')
#         # return redirect('exam_result', attempt_id=attempt.id)

#     return render(request, 'exam_attempt.html', {'exam': exam, 'questions': questions})


#  Sample 2


# def exam_attempt(request, exam_id):
#     exam = get_object_or_404(Exam, id=exam_id)
#     questions = Question.objects.filter(question_exam=exam)

#     if request.method == 'POST':
#         user = request.user
#         attempt = ExamAttempt(user = user, exam=exam)
#         attempt.save()

#         question_ids = set()

#         for question in questions:
#             answer = request.POST.get(f'question_{question.id}')

#             if question.id in question_ids:
#                 messages.error(request, 'Each question should have a unique answer.')
#                 return redirect('exam_attempt', exam_id=exam_id)

#             question_ids.add(question.id)

#             user_answer = UserAnswer(exam_attempt=attempt, question=question, answer=answer)
#             user_answer.save()

#         attempt.calculate_score()
#         messages.success(request, 'Exam submitted successfully.')
#         # return redirect('exam_result', attempt_id=attempt.id)

#     return render(request, 'exam_attempt.html', {'exam': exam, 'questions': questions})

# Sample 3 

# def exam_attempt(request, exam_id):
#     exam = get_object_or_404(Exam, id=exam_id)
#     questions = Question.objects.filter(question_exam=exam)

#     if request.method == 'POST':
#         # Retrieve session ID
#         session_id = request.session.session_key

#         # Create or retrieve ExamAttempt based on session ID
#         attempt, created = ExamAttempt.objects.get_or_create(session_id=session_id, exam=exam)

#         if not created:
#             messages.error(request, 'You have already attempted this exam.')
#             return redirect('exam_attempt', exam_id=exam_id)

#         question_ids = set()

#         for question in questions:
#             answer = request.POST.get(f'question_{question.id}')

#             if question.id in question_ids:
#                 messages.error(request, 'Each question should have a unique answer.')
#                 return redirect('exam_attempt', exam_id=exam_id)

#             question_ids.add(question.id)

#             user_answer = UserAnswer(exam_attempt=attempt, question=question, answer=answer)
#             user_answer.save()

#         attempt.calculate_score()
#         messages.success(request, 'Exam submitted successfully.')
#         # return redirect('exam_result', attempt_id=attempt.id)

#     return render(request, 'exam_attempt.html', {'exam': exam, 'questions': questions})

# sample  4 with proctoring check 

# def exam_attempt(request, exam_id):
#     exam = get_object_or_404(Exam, id=exam_id)
#     questions = Question.objects.filter(question_exam=exam)

#     if request.method == 'POST':
#         session_id = request.session.session_key

#         attempt = ExamAttempt(session_id=session_id, exam=exam)
#         attempt.save()

#         question_ids = set() 

#         for question in questions:
#             answer = request.POST.get(f'question_{question.id}')

#             if question.id in question_ids:
#                 messages.error(request, 'Each question should have a unique answer.')
#                 return redirect('exam_attempt', exam_id=exam_id)

#             question_ids.add(question.id)

#             user_answer = UserAnswer(exam_attempt=attempt, question=question, answer=answer)
#             user_answer.save()

#         # Perform proctoring checks
#         status_eye_tracking = perform_eye_tracking_check(request)
#         status_mobile_detection = perform_mobile_detection_check(request)
#         status_person_missing = detect_missing_person(request)
#         status_second_person = detect_second_person(request)

#         # Capture image if any flag is raised
#         if any([status_eye_tracking, status_mobile_detection, status_person_missing, status_second_person]):
#             capture_image(request, attempt.id)

#         # Save the proctoring check results
#         exam_result = ExamResult(exam_attempt=attempt, status_eye_tracking=status_eye_tracking,
#                                  status_mobile_detection=status_mobile_detection,
#                                  status_person_missing=status_person_missing,
#                                  status_second_person=status_second_person)
#         exam_result.save()

#         attempt.calculate_score()
#         messages.success(request, 'Exam submitted successfully.')
#         # return redirect('exam_result', attempt_id=attempt.id)

#     return render(request, 'exam_attempt.html', {'exam': exam, 'questions': questions})


# def perform_eye_tracking_check(request):
#     # Perform eye tracking check logic
#     # Return True if the check is passed, False otherwise
#     pass


# def perform_mobile_detection_check(request):
#     # Perform mobile phone detection check logic
#     # Return True if the check is passed, False otherwise
#     pass


# def detect_missing_person(request):
#     # Detect missing person logic
#     # Return True if the person is missing, False otherwise
#     pass


# def detect_second_person(request):
#     # Detect second person logic
#     # Return True if a second person is detected, False otherwise
#     pass


# def capture_image(request, attempt_id):
#     # Capture and store the image associated with the attempt
#     # Use attempt_id or session_id to link the image to the attempt
#     pass


# def calculate_exam_end_time(start_time, duration):
#     duration_minutes = int(duration)
#     end_time = start_time + timedelta(minutes=duration_minutes)
#     return end_time


# def start_exam(request, exam_id):
#     exam = get_object_or_404(Exam, id=exam_id)
#     start_time = datetime.now()
#     end_time = calculate_exam_end_time(start_time, exam.duration)

#     request.session['exam_id'] = exam_id
#     request.session['start_time'] = start_time
#     request.session['end_time'] = end_time

#     # Additional code for rendering the exam start page

#     return render(request, 'exam_start.html', {'exam': exam, 'start_time': start_time, 'end_time': end_time})


# exam_attempt sample 1 (html)
{% load static %}
{% load bootstrap4 %}
{% load i18n %}

{% block content %}
  <!-- Content of the page -->
  <div class="row">
    <div class="col-md-3">
      <!-- Vertical navigation bar -->
      <ul class="nav flex-column">
        {% for question in questions %}
          <li class="nav-item">
            <a class="nav-link question-link" href="#" data-question-id="{{ question.id }}">{{ question.question_text }}</a>
          </li>
        {% endfor %}
      </ul>
    </div>

    <div class="col-md-9">
      <!-- Main content -->
      <!-- This section will display the selected question in the popup window -->
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    $(document).ready(function() {
      $('.question-link').click(function(e) {
        e.preventDefault();
        var questionId = $(this).data('question-id');
        var question = getQuestionById(questionId);

        var popupWindow = window.open('', 'questionPopup', 'width=500,height=500');
        popupWindow.document.open();
        popupWindow.document.write('<html><head><title>Question ' + question.id + '</title></head><body>');
        popupWindow.document.write('<h3>Question ' + question.id + '</h3>');
        popupWindow.document.write('<p>' + question.question_text + '</p>');

        popupWindow.document.write('<form method="post" action="{% url 'exam_attempt' exam.id %}">');
        popupWindow.document.write('{% csrf_token %}');
        for (var i = 0; i < question.options.length; i++) {
          var option = question.options[i];
          popupWindow.document.write('<div>');
          popupWindow.document.write('<input type="radio" id="option_' + option.id + '" name="question_' + question.id + '" value="' + option.id + '">');
          popupWindow.document.write('<label for="option_' + option.id + '">' + option.option_text + '</label>');
          popupWindow.document.write('</div>');
        }
        popupWindow.document.write('<button type="submit">Submit</button>');
        popupWindow.document.write('</form>');

        popupWindow.document.write('</body></html>');
        popupWindow.document.close();
      });

      function getQuestionById(questionId) {
        var questions = [
          {% for question in questions %}
            {
              id: {{ question.id }},
              question_text: "{{ question.question_text }}",
              options: [
                {% for option in question.options.all %}
                  {
                    id: {{ option.id }},
                    option_text: "{{ option.option_text }}"
                  },
                {% endfor %}
              ]
            },
          {% endfor %}
        ];

        return questions.find(function(question) {
          return question.id === questionId;
        });
      }
    });
  </script>
{% endblock %} }}
